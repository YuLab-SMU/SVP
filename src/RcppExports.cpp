// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ExtractFeatureScoreCpp
List ExtractFeatureScoreCpp(arma::sp_mat& x, CharacterVector& rnm, CharacterVector& cnm, Rcpp::List& g);
RcppExport SEXP _SVP_ExtractFeatureScoreCpp(SEXP xSEXP, SEXP rnmSEXP, SEXP cnmSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type rnm(rnmSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type cnm(cnmSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(ExtractFeatureScoreCpp(x, rnm, cnm, g));
    return rcpp_result_gen;
END_RCPP
}
// CalRandSpatialKld
NumericVector CalRandSpatialKld(NumericMatrix coords, NumericVector w, NumericVector gx, NumericVector gy, NumericVector h, NumericVector bg, int random_times, unsigned int seed);
RcppExport SEXP _SVP_CalRandSpatialKld(SEXP coordsSEXP, SEXP wSEXP, SEXP gxSEXP, SEXP gySEXP, SEXP hSEXP, SEXP bgSEXP, SEXP random_timesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gx(gxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gy(gySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bg(bgSEXP);
    Rcpp::traits::input_parameter< int >::type random_times(random_timesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(CalRandSpatialKld(coords, w, gx, gy, h, bg, random_times, seed));
    return rcpp_result_gen;
END_RCPP
}
// CalBgSpatialKld
NumericVector CalBgSpatialKld(NumericMatrix coords, NumericVector gx, NumericVector gy, NumericVector h);
RcppExport SEXP _SVP_CalBgSpatialKld(SEXP coordsSEXP, SEXP gxSEXP, SEXP gySEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gx(gxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gy(gySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(CalBgSpatialKld(coords, gx, gy, h));
    return rcpp_result_gen;
END_RCPP
}
// CalSpatialKld
NumericVector CalSpatialKld(NumericMatrix coords, NumericVector d, NumericVector bgkld, NumericVector gx, NumericVector gy, NumericVector h, int random_times, unsigned int seed);
RcppExport SEXP _SVP_CalSpatialKld(SEXP coordsSEXP, SEXP dSEXP, SEXP bgkldSEXP, SEXP gxSEXP, SEXP gySEXP, SEXP hSEXP, SEXP random_timesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bgkld(bgkldSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gx(gxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gy(gySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type random_times(random_timesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(CalSpatialKld(coords, d, bgkld, gx, gy, h, random_times, seed));
    return rcpp_result_gen;
END_RCPP
}
// CalSpatialKldCpp
NumericMatrix CalSpatialKldCpp(NumericMatrix coords, arma::sp_mat d, NumericVector l, Nullable<NumericVector> h, int n, int random_times, unsigned int seed);
RcppExport SEXP _SVP_CalSpatialKldCpp(SEXP coordsSEXP, SEXP dSEXP, SEXP lSEXP, SEXP hSEXP, SEXP nSEXP, SEXP random_timesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type random_times(random_timesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(CalSpatialKldCpp(coords, d, l, h, n, random_times, seed));
    return rcpp_result_gen;
END_RCPP
}
// MCAStep1
List MCAStep1(arma::sp_mat& X);
RcppExport SEXP _SVP_MCAStep1(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(MCAStep1(X));
    return rcpp_result_gen;
END_RCPP
}
// MCAStep2
List MCAStep2(NumericMatrix Z, NumericMatrix V, NumericVector Dc);
RcppExport SEXP _SVP_MCAStep2(SEXP ZSEXP, SEXP VSEXP, SEXP DcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dc(DcSEXP);
    rcpp_result_gen = Rcpp::wrap(MCAStep2(Z, V, Dc));
    return rcpp_result_gen;
END_RCPP
}
// parallelCalRWR
NumericMatrix parallelCalRWR(arma::sp_mat x, arma::sp_mat v, double restart, double stop_delta, int stop_step);
RcppExport SEXP _SVP_parallelCalRWR(SEXP xSEXP, SEXP vSEXP, SEXP restartSEXP, SEXP stop_deltaSEXP, SEXP stop_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type restart(restartSEXP);
    Rcpp::traits::input_parameter< double >::type stop_delta(stop_deltaSEXP);
    Rcpp::traits::input_parameter< int >::type stop_step(stop_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelCalRWR(x, v, restart, stop_delta, stop_step));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SVP_ExtractFeatureScoreCpp", (DL_FUNC) &_SVP_ExtractFeatureScoreCpp, 4},
    {"_SVP_CalRandSpatialKld", (DL_FUNC) &_SVP_CalRandSpatialKld, 8},
    {"_SVP_CalBgSpatialKld", (DL_FUNC) &_SVP_CalBgSpatialKld, 4},
    {"_SVP_CalSpatialKld", (DL_FUNC) &_SVP_CalSpatialKld, 8},
    {"_SVP_CalSpatialKldCpp", (DL_FUNC) &_SVP_CalSpatialKldCpp, 7},
    {"_SVP_MCAStep1", (DL_FUNC) &_SVP_MCAStep1, 1},
    {"_SVP_MCAStep2", (DL_FUNC) &_SVP_MCAStep2, 3},
    {"_SVP_parallelCalRWR", (DL_FUNC) &_SVP_parallelCalRWR, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SVP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
